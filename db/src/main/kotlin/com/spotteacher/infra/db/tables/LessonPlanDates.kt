/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables

import com.spotteacher.infra.db.tables.records.LessonPlanDatesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime
import kotlin.collections.Collection

/**
 * 授業計画の日付
 */
@Suppress("warnings")
open class LessonPlanDates(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LessonPlanDatesRecord>?,
    parentPath: InverseForeignKey<out Record, LessonPlanDatesRecord>?,
    aliased: Table<LessonPlanDatesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<LessonPlanDatesRecord>(
    alias,
    null,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("授業計画の日付"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>lesson_plan_dates</code>
         */
        val LESSON_PLAN_DATES: LessonPlanDates = LessonPlanDates()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LessonPlanDatesRecord> = LessonPlanDatesRecord::class.java

    /**
     * The column <code>lesson_plan_dates.id</code>.
     */
    val ID: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>lesson_plan_dates.lesson_plan_id</code>.
     */
    val LESSON_PLAN_ID: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("lesson_plan_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>lesson_plan_dates.start_month</code>. 開講期間（開始月）
     */
    val START_MONTH: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("start_month"), SQLDataType.BIGINT.nullable(false), this, "開講期間（開始月）")

    /**
     * The column <code>lesson_plan_dates.start_day</code>. 開講期間（開始日）
     */
    val START_DAY: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("start_day"), SQLDataType.BIGINT.nullable(false), this, "開講期間（開始日）")

    /**
     * The column <code>lesson_plan_dates.end_month</code>. 開講期間（終了月）
     */
    val END_MONTH: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("end_month"), SQLDataType.BIGINT.nullable(false), this, "開講期間（終了月）")

    /**
     * The column <code>lesson_plan_dates.end_day</code>. 開講期間（終了日）
     */
    val END_DAY: TableField<LessonPlanDatesRecord, Long?> = createField(DSL.name("end_day"), SQLDataType.BIGINT.nullable(false), this, "開講期間（終了日）")

    /**
     * The column <code>lesson_plan_dates.start_time</code>.
     */
    val START_TIME: TableField<LessonPlanDatesRecord, LocalDateTime?> = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>lesson_plan_dates.end_time</code>.
     */
    val END_TIME: TableField<LessonPlanDatesRecord, LocalDateTime?> = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>lesson_plan_dates.created_at</code>.
     */
    val CREATED_AT: TableField<LessonPlanDatesRecord, LocalDateTime?> = createField(
        DSL.name("created_at"),
        SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
        this,
        ""
    )

    /**
     * The column <code>lesson_plan_dates.updated_at</code>.
     */
    val UPDATED_AT: TableField<LessonPlanDatesRecord, LocalDateTime?> = createField(
        DSL.name("updated_at"),
        SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)),
        this,
        ""
    )

    private constructor(alias: Name, aliased: Table<LessonPlanDatesRecord>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LessonPlanDatesRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LessonPlanDatesRecord>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>lesson_plan_dates</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>lesson_plan_dates</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>lesson_plan_dates</code> table reference
     */
    constructor() : this(DSL.name("lesson_plan_dates"), null)
    override fun getIdentity(): Identity<LessonPlanDatesRecord, Long?> = super.getIdentity() as Identity<LessonPlanDatesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<LessonPlanDatesRecord> = Internal.createUniqueKey(
        LessonPlanDates.LESSON_PLAN_DATES,
        DSL.name("KEY_lesson_plan_dates_PRIMARY"),
        arrayOf(LessonPlanDates.LESSON_PLAN_DATES.ID),
        true
    )
    override fun `as`(alias: String): LessonPlanDates = LessonPlanDates(DSL.name(alias), this)
    override fun `as`(alias: Name): LessonPlanDates = LessonPlanDates(alias, this)
    override fun `as`(alias: Table<*>): LessonPlanDates = LessonPlanDates(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LessonPlanDates = LessonPlanDates(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LessonPlanDates = LessonPlanDates(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LessonPlanDates = LessonPlanDates(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LessonPlanDates = LessonPlanDates(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LessonPlanDates = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LessonPlanDates = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LessonPlanDates = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LessonPlanDates = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LessonPlanDates = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LessonPlanDates = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LessonPlanDates = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LessonPlanDates = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LessonPlanDates = where(DSL.notExists(select))
}
