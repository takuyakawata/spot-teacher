/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables

import com.spotteacher.infra.db.tables.records.RefreshTokensRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RefreshTokens(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RefreshTokensRecord>?,
    parentPath: InverseForeignKey<out Record, RefreshTokensRecord>?,
    aliased: Table<RefreshTokensRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<RefreshTokensRecord>(
    alias,
    null,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>refresh_tokens</code>
         */
        val REFRESH_TOKENS: RefreshTokens = RefreshTokens()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RefreshTokensRecord> = RefreshTokensRecord::class.java

    /**
     * The column <code>refresh_tokens.id</code>.
     */
    val ID: TableField<RefreshTokensRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>refresh_tokens.user_id</code>.
     */
    val USER_ID: TableField<RefreshTokensRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>refresh_tokens.token</code>. リフレッシュトークン本体
     */
    val TOKEN: TableField<RefreshTokensRecord, String?> = createField(DSL.name("token"), SQLDataType.VARCHAR(500).nullable(false), this, "リフレッシュトークン本体")

    /**
     * The column <code>refresh_tokens.expires_at</code>. 有効期限
     */
    val EXPIRES_AT: TableField<RefreshTokensRecord, LocalDateTime?> = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "有効期限")

    /**
     * The column <code>refresh_tokens.created_at</code>.
     */
    val CREATED_AT: TableField<RefreshTokensRecord, LocalDateTime?> =
        createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<RefreshTokensRecord>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RefreshTokensRecord>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RefreshTokensRecord>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>refresh_tokens</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>refresh_tokens</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>refresh_tokens</code> table reference
     */
    constructor() : this(DSL.name("refresh_tokens"), null)
    override fun getIdentity(): Identity<RefreshTokensRecord, Long?> = super.getIdentity() as Identity<RefreshTokensRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<RefreshTokensRecord> = Internal.createUniqueKey(
        RefreshTokens.REFRESH_TOKENS,
        DSL.name("KEY_refresh_tokens_PRIMARY"),
        arrayOf(RefreshTokens.REFRESH_TOKENS.ID),
        true
    )
    override fun getUniqueKeys(): List<UniqueKey<RefreshTokensRecord>> = listOf(
        Internal.createUniqueKey(RefreshTokens.REFRESH_TOKENS, DSL.name("KEY_refresh_tokens_token"), arrayOf(RefreshTokens.REFRESH_TOKENS.TOKEN), true)
    )
    override fun `as`(alias: String): RefreshTokens = RefreshTokens(DSL.name(alias), this)
    override fun `as`(alias: Name): RefreshTokens = RefreshTokens(alias, this)
    override fun `as`(alias: Table<*>): RefreshTokens = RefreshTokens(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RefreshTokens = RefreshTokens(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RefreshTokens = RefreshTokens(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RefreshTokens = RefreshTokens(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): RefreshTokens = RefreshTokens(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RefreshTokens = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): RefreshTokens = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): RefreshTokens = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RefreshTokens = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RefreshTokens = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RefreshTokens = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RefreshTokens = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RefreshTokens = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RefreshTokens = where(DSL.notExists(select))
}
