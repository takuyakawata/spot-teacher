schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

union FindProductQueryOutput = FindProductQueryError | FindProductQuerySuccess

union FindProductsQueryOutput = FindProductsQueryError | FindProductsQuerySuccess

type FindProductQueryError {
  error: ProductError!
}

type FindProductQuerySuccess {
  product: Product!
}

type FindProductsQueryError {
  error: ProductError!
}

type FindProductsQuerySuccess {
  products: [Product!]!
}

type Mutation {
  createProduct(input: CreateProductMutationInput!): Unit!
}

type Product {
  description: String
  id: ID!
  name: String!
  price: Int!
}

type ProductError {
  code: ProductErrorCode!
  message: String!
}

type Query {
  hello(name: String): String!
  ping: String!
  product(productId: ID!): FindProductQueryOutput!
  products(lastId: String, limit: Int!, sortOrder: String!): FindProductsQueryOutput!
}

enum ProductErrorCode {
  PRODUCT_NOT_FOUND
}

"meaningless value. Necessary just for graphql limitation. Only used for output."
scalar Unit

input CreateProductMutationInput {
  description: String
  name: String!
  price: Int!
}
