/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables


import com.spotteacher.infra.db.tables.records.LessonScheduleReportsRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class LessonScheduleReports(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LessonScheduleReportsRecord>?,
    parentPath: InverseForeignKey<out Record, LessonScheduleReportsRecord>?,
    aliased: Table<LessonScheduleReportsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<LessonScheduleReportsRecord>(
    alias,
    null,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>lesson_schedule_reports</code>
         */
        val LESSON_SCHEDULE_REPORTS: LessonScheduleReports = LessonScheduleReports()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LessonScheduleReportsRecord> = LessonScheduleReportsRecord::class.java

    /**
     * The column <code>lesson_schedule_reports.id</code>.
     */
    val ID: TableField<LessonScheduleReportsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>lesson_schedule_reports.lesson_schedule_id</code>.
     */
    val LESSON_SCHEDULE_ID: TableField<LessonScheduleReportsRecord, Long?> = createField(DSL.name("lesson_schedule_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>lesson_schedule_reports.name</code>.
     */
    val NAME: TableField<LessonScheduleReportsRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>lesson_schedule_reports.four_step_rating</code>.
     */
    val FOUR_STEP_RATING: TableField<LessonScheduleReportsRecord, Int?> = createField(DSL.name("four_step_rating"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>lesson_schedule_reports.comment</code>.
     */
    val COMMENT: TableField<LessonScheduleReportsRecord, String?> = createField(DSL.name("comment"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>lesson_schedule_reports.yes_or_no</code>.
     */
    val YES_OR_NO: TableField<LessonScheduleReportsRecord, Boolean?> = createField(DSL.name("yes_or_no"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>lesson_schedule_reports.created_at</code>.
     */
    val CREATED_AT: TableField<LessonScheduleReportsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>lesson_schedule_reports.updated_at</code>.
     */
    val UPDATED_AT: TableField<LessonScheduleReportsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<LessonScheduleReportsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LessonScheduleReportsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LessonScheduleReportsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>lesson_schedule_reports</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>lesson_schedule_reports</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>lesson_schedule_reports</code> table reference
     */
    constructor(): this(DSL.name("lesson_schedule_reports"), null)
    override fun getIdentity(): Identity<LessonScheduleReportsRecord, Long?> = super.getIdentity() as Identity<LessonScheduleReportsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<LessonScheduleReportsRecord> = Internal.createUniqueKey(LessonScheduleReports.LESSON_SCHEDULE_REPORTS, DSL.name("KEY_lesson_schedule_reports_PRIMARY"), arrayOf(LessonScheduleReports.LESSON_SCHEDULE_REPORTS.ID), true)
    override fun getChecks(): List<Check<LessonScheduleReportsRecord>> = listOf(
        Internal.createCheck(this, DSL.name("chk_four_step_rating"), "((`four_step_rating` >= 1) and (`four_step_rating` <= 4))", true)
    )
    override fun `as`(alias: String): LessonScheduleReports = LessonScheduleReports(DSL.name(alias), this)
    override fun `as`(alias: Name): LessonScheduleReports = LessonScheduleReports(alias, this)
    override fun `as`(alias: Table<*>): LessonScheduleReports = LessonScheduleReports(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LessonScheduleReports = LessonScheduleReports(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LessonScheduleReports = LessonScheduleReports(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LessonScheduleReports = LessonScheduleReports(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LessonScheduleReports = LessonScheduleReports(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LessonScheduleReports = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LessonScheduleReports = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LessonScheduleReports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LessonScheduleReports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LessonScheduleReports = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LessonScheduleReports = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LessonScheduleReports = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LessonScheduleReports = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LessonScheduleReports = where(DSL.notExists(select))
}
