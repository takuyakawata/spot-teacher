/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables.records

import com.spotteacher.infra.db.tables.Educations
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class EducationsRecord private constructor() : UpdatableRecordImpl<EducationsRecord>(Educations.EDUCATIONS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var displayOrder: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsActive")
    open var isActive: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised EducationsRecord
     */
    constructor(id: Long? = null, name: String, displayOrder: Int? = null, isActive: Boolean? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null) : this() {
        this.id = id
        this.name = name
        this.displayOrder = displayOrder
        this.isActive = isActive
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetTouchedOnNotNull()
    }
}
