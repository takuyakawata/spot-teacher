/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables.records


import com.spotteacher.infra.db.enums.LessonReservationsLessonType
import com.spotteacher.infra.db.tables.LessonReservations

import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class LessonReservationsRecord private constructor() : UpdatableRecordImpl<LessonReservationsRecord>(LessonReservations.LESSON_RESERVATIONS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var companyId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var schoolId: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open var teacherId: Long
        set(value): Unit = set(3, value)
        get(): Long = get(3) as Long

    open var lessonPlanId: Long
        set(value): Unit = set(4, value)
        get(): Long = get(4) as Long

    open var title: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var description: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var location: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var lessonType: LessonReservationsLessonType?
        set(value): Unit = set(8, value)
        get(): LessonReservationsLessonType? = get(8) as LessonReservationsLessonType?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(10, value)
        get(): LocalDateTime? = get(10) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised LessonReservationsRecord
     */
    constructor(id: Long? = null, companyId: Long, schoolId: Long, teacherId: Long, lessonPlanId: Long, title: String? = null, description: String? = null, location: String? = null, lessonType: LessonReservationsLessonType? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.companyId = companyId
        this.schoolId = schoolId
        this.teacherId = teacherId
        this.lessonPlanId = lessonPlanId
        this.title = title
        this.description = description
        this.location = location
        this.lessonType = lessonType
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetTouchedOnNotNull()
    }
}
