/*
 * This file is generated by jOOQ.
 */
package com.spotteacher.infra.db.tables.records


import com.spotteacher.infra.db.enums.LessonSchedulesLessonType
import com.spotteacher.infra.db.enums.LessonSchedulesStatus
import com.spotteacher.infra.db.tables.LessonSchedules

import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class LessonSchedulesRecord private constructor() : UpdatableRecordImpl<LessonSchedulesRecord>(LessonSchedules.LESSON_SCHEDULES) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var lessonReservationId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var schoolId: Long
        set(value): Unit = set(2, value)
        get(): Long = get(2) as Long

    open var teacherId: Long
        set(value): Unit = set(3, value)
        get(): Long = get(3) as Long

    open var lessonPlanId: Long
        set(value): Unit = set(4, value)
        get(): Long = get(4) as Long

    open var status: LessonSchedulesStatus?
        set(value): Unit = set(5, value)
        get(): LessonSchedulesStatus? = get(5) as LessonSchedulesStatus?

    open var title: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var description: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var location: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var lessonType: LessonSchedulesLessonType?
        set(value): Unit = set(9, value)
        get(): LessonSchedulesLessonType? = get(9) as LessonSchedulesLessonType?

    open var date: LocalDate
        set(value): Unit = set(10, value)
        get(): LocalDate = get(10) as LocalDate

    open var startTime: LocalDateTime
        set(value): Unit = set(11, value)
        get(): LocalDateTime = get(11) as LocalDateTime

    open var endTime: LocalDateTime
        set(value): Unit = set(12, value)
        get(): LocalDateTime = get(12) as LocalDateTime

    open var createdAt: LocalDateTime?
        set(value): Unit = set(13, value)
        get(): LocalDateTime? = get(13) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(14, value)
        get(): LocalDateTime? = get(14) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised LessonSchedulesRecord
     */
    constructor(id: Long? = null, lessonReservationId: Long, schoolId: Long, teacherId: Long, lessonPlanId: Long, status: LessonSchedulesStatus? = null, title: String, description: String? = null, location: String? = null, lessonType: LessonSchedulesLessonType? = null, date: LocalDate, startTime: LocalDateTime, endTime: LocalDateTime, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.lessonReservationId = lessonReservationId
        this.schoolId = schoolId
        this.teacherId = teacherId
        this.lessonPlanId = lessonPlanId
        this.status = status
        this.title = title
        this.description = description
        this.location = location
        this.lessonType = lessonType
        this.date = date
        this.startTime = startTime
        this.endTime = endTime
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetTouchedOnNotNull()
    }
}
