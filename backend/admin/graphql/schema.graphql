schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

interface LessonPlan {
  createdAt: LocalDateTime!
  id: ID!
}

union CompanyQueryOutput = CompanyQueryError | CompanyQuerySuccess

union CreateCompanyMutationOutput = CreateCompanyMutationError | CreateCompanyMutationSuccess

union CreateDraftLessonPlanMutationOutput = CreateDraftLessonPlanMutationError | CreateDraftLessonPlanMutationSuccess

union CreateEducationMutationOutput = CreateEducationMutationError | CreateEducationMutationSuccess

union DeleteCompanyMutationOutput = DeleteCompanyMutationError | DeleteCompanyMutationSuccess

union DeleteEducationMutationOutput = DeleteEducationMutationError | DeleteEducationMutationSuccess

union DeleteProductMutationOutput = DeleteProductMutationError | DeleteProductMutationSuccess

union FindProductQueryOutput = FindProductQueryError | FindProductQuerySuccess

union FindProductsQueryOutput = FindProductsQueryError | FindProductsQuerySuccess

union LessonPlanQueryOutput = LessonPlanQueryErrorOutput | LessonPlanQuerySuccessOutput

union UpdateCompanyMutationOutput = UpdateCompanyMutationError | UpdateCompanyMutationSuccess

union UpdateEducationMutationOutput = UpdateEducationMutationError | UpdateEducationMutationSuccess

union UpdateLessonPlanMutationOutput = UpdateLessonPlanMutationError | UpdateLessonPlanMutationSuccess

union UpdateLessonPlanStatusMutationOutput = UpdateLessonPlanStatusMutationError | UpdateLessonPlanStatusMutationSuccess

union UpdatePassWordMutationOutput = UpdatePassWordMutationError | UpdatePassWordMutationSuccess

union UpdateProductMutationOutput = UpdateProductMutationError | UpdateProductMutationSuccess

type AdminUser {
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  lastName: String!
  password: String!
}

type Company {
  buildingName: String
  city: String!
  createdAt: LocalDateTime!
  id: ID!
  name: String!
  phoneNumber: String
  postalCode: String!
  prefecture: String!
  streetAddress: String!
  url: String
}

type CompanyQueryError {
  error: CompanyErrorCode!
  message: String
}

type CompanyQuerySuccess {
  company: Company!
}

type CreateCompanyMutationError {
  code: CompanyErrorCode!
  message: String!
}

type CreateCompanyMutationSuccess {
  company: Company!
}

type CreateDraftLessonPlanMutationError {
  code: LessonPlanErrorCode!
  message: String!
}

type CreateDraftLessonPlanMutationSuccess {
  result: Unit!
}

type CreateEducationMutationError {
  code: EducationErrorCode!
  message: String!
}

type CreateEducationMutationSuccess {
  result: Unit!
}

type CreateSchoolPayload {
  errors: [String!]!
  school: School
}

type DeleteCompanyMutationError {
  code: CompanyErrorCode!
  message: String!
}

type DeleteCompanyMutationSuccess {
  result: Unit!
}

type DeleteEducationMutationError {
  code: EducationErrorCode!
  message: String!
}

type DeleteEducationMutationSuccess {
  result: Unit!
}

type DeleteProductMutationError {
  error: ProductError!
}

type DeleteProductMutationSuccess {
  success: Boolean!
}

type DeleteSchoolPayload {
  errors: [String!]!
  success: Boolean!
}

type DraftLessonPlan implements LessonPlan {
  annualMaxExecutions: Int
  createdAt: LocalDateTime!
  description: String
  id: ID!
  lessonPlanDates: [LessonPlanDate!]
  lessonPlanGrades: [Grade!]!
  lessonPlanSubjects: [Subject!]!
  lessonType: LessonType
  location: String
  title: String
}

type EducationType {
  displayOrder: Int!
  grades: [Grade!]!
  id: ID!
  isActive: Boolean!
  name: String!
  subjects: [Subject!]!
}

type FindProductQueryError {
  error: ProductError!
}

type FindProductQuerySuccess {
  product: Product!
}

type FindProductsQueryError {
  error: ProductError!
}

type FindProductsQuerySuccess {
  products: [Product!]!
}

type LessonPlanDate {
  endDay: Int!
  endMonth: Int!
  endTime: Time!
  startDay: Int!
  startMonth: Int!
  startTime: Time!
}

type LessonPlanQueryErrorOutput {
  code: LessonPlanErrorCode!
  message: String!
}

type LessonPlanQuerySuccessOutput {
  lessonPlan: LessonPlan!
}

type Mutation {
  createAdminUser(input: CreateAdminUserMutationInput!): Unit!
  createCompany(input: CreateCompanyMutationInput!): CreateCompanyMutationOutput!
  createDraftLessonPlan(input: CreateDraftLessonPlanMutationInput!): CreateDraftLessonPlanMutationOutput!
  createEducation(name: NonEmptyString!): CreateEducationMutationOutput!
  createProduct(input: CreateProductMutationInput!): Unit!
  createSchool(input: CreateSchoolInput!): CreateSchoolPayload!
  createUploadFiles(input: CreateUploadFilesMutationInput!): [uploadFile!]!
  deleteCompany(id: ID!): DeleteCompanyMutationOutput!
  deleteEducation(id: ID!): DeleteEducationMutationOutput!
  deleteProduct(input: DeleteProductMutationInput!): DeleteProductMutationOutput!
  deleteSchool(input: DeleteSchoolInput!): DeleteSchoolPayload!
  deleteUploadFiles(input: DeleteUploadFilesMutationInput!): Unit!
  updateCompany(input: UpdateCompanyMutationInput!): UpdateCompanyMutationOutput!
  updateEducation(input: UpdateEducationMutationInput!): UpdateEducationMutationOutput!
  updateLessonPlan(input: UpdateLessonPlanMutationInput!): UpdateLessonPlanMutationOutput!
  updateLessonPlanStatus(id: ID!): UpdateLessonPlanStatusMutationOutput!
  updatePassword(input: UpdatePasswordMutationInput!): UpdatePassWordMutationOutput!
  updateProduct(input: UpdateProductMutationInput!): UpdateProductMutationOutput!
  updateSchool(input: UpdateSchoolInput!): UpdateSchoolPayload!
}

type Product {
  description: String
  id: ID!
  name: String!
  price: Int!
}

type ProductError {
  code: ProductErrorCode!
  message: String!
}

type PublishedLessonPlan implements LessonPlan {
  annualMaxExecutions: Int!
  createdAt: LocalDateTime!
  description: String!
  id: ID!
  lessonPlanDates: [LessonPlanDate!]!
  lessonPlanGrades: [Grade!]!
  lessonPlanSubjects: [Subject!]!
  lessonType: LessonType!
  location: String!
  title: String!
}

type Query {
  adminUsers: [AdminUser!]!
  companies: [Company!]!
  company(id: ID!): CompanyQueryOutput!
  educationFindByName(name: NonEmptyString!): EducationType
  educationGetAll: [EducationType!]!
  hello(name: String): String!
  lessonPlan(id: ID!): LessonPlanQueryOutput!
  ping: String!
  product(productId: ID!): FindProductQueryOutput!
  products(lastId: String, limit: Int!, sortOrder: String!): FindProductsQueryOutput!
  school(id: String!): School
  schools: [School!]!
}

type School {
  buildingName: String
  city: String!
  id: String!
  name: String!
  phoneNumber: String
  postalCode: String!
  prefecture: String!
  schoolCategory: SchoolCategory!
  streetAddress: String!
  url: String
}

type UpdateCompanyMutationError {
  code: CompanyErrorCode!
  message: String!
}

type UpdateCompanyMutationSuccess {
  result: Unit!
}

type UpdateEducationMutationError {
  code: EducationErrorCode!
  message: String!
}

type UpdateEducationMutationSuccess {
  result: Unit!
}

type UpdateLessonPlanMutationError {
  code: LessonPlanErrorCode!
  message: String!
}

type UpdateLessonPlanMutationSuccess {
  result: Unit!
}

type UpdateLessonPlanStatusMutationError {
  code: LessonPlanErrorCode!
  message: String!
}

type UpdateLessonPlanStatusMutationSuccess {
  result: Unit!
}

type UpdatePassWordMutationError {
  code: AdminUserErrorCode!
  message: String!
}

type UpdatePassWordMutationSuccess {
  result: Unit!
}

type UpdateProductMutationError {
  error: ProductError!
}

type UpdateProductMutationSuccess {
  product: Product!
}

type UpdateSchoolPayload {
  errors: [String!]!
  school: School
}

type uploadFile {
  generateDownloadFileUrl: String!
  generateUploadFileUrl: String!
  id: ID!
  uploadStatus: UploadStatus!
}

enum AdminUserErrorCode {
  ADMIN_USER_ALREADY_EXISTS
  ADMIN_USER_NOT_FOUND
}

enum CompanyErrorCode {
  COMPANY_ALREADY_EXISTS
  COMPANY_NOT_FOUND
}

enum EducationErrorCode {
  EDUCATION_ALREADY_EXISTS
  EDUCATION_NOT_FOUND
}

enum Grade {
  ELEMENTARY_1
  ELEMENTARY_2
  ELEMENTARY_3
  ELEMENTARY_4
  ELEMENTARY_5
  ELEMENTARY_6
  JUNIOR_HIGH_1
  JUNIOR_HIGH_2
  JUNIOR_HIGH_3
}

enum LessonPlanErrorCode {
  LESSON_PLAN_ALREADY_EXISTS
  LESSON_PLAN_NOT_FOUND
}

enum LessonType {
  OFFLINE
  ONLINE
  ONLINE_AND_OFFLINE
}

enum Prefecture {
  AICHI
  AKITA
  AOMORI
  CHIBA
  EHIME
  FUKUI
  FUKUOKA
  FUKUSHIMA
  GIFU
  GUNMA
  HIROSHIMA
  HOKKAIDO
  HYOGO
  IBARAKI
  ISHIKAWA
  IWATE
  KAGAWA
  KAGOSHIMA
  KANAGAWA
  KOCHI
  KUMAMOTO
  KYOTO
  MIE
  MIYAGI
  MIYAZAKI
  NAGANO
  NAGASAKI
  NARA
  NIIGATA
  OITA
  OKAYAMA
  OKINAWA
  OSAKA
  SAGA
  SAITAMA
  SHIGA
  SHIMANE
  TOCHIGI
  TOKUSHIMA
  TOKYO
  TOTTORI
  TOYAMA
  WAKAYAMA
  YAMAGATA
  YAMANASHI
}

enum ProductErrorCode {
  PRODUCT_NOT_FOUND
}

enum SchoolCategory {
  ELEMENTARY
  HIGH
  JUNIOR_HIGH
}

enum Subject {
  ARITHMETIC
  ART
  ELEMENTARY_ART_AND_CRAFTS
  ENGLISH
  FOREIGN_LANGUAGE
  FOREIGN_LANGUAGE_ACTIVITIES
  HOMEMAKING
  INTEGRATED_STUDIES
  JAPANESE
  LIFE_SKILLS
  MATH
  MORAL_EDUCATION
  MUSIC
  PHYSICAL_EDUCATION
  SCIENCE
  SOCIAL_STUDIES
}

enum UploadFileDirectoryFeatureName {
  REAL_ESTATE
  REPORT
  WORK_PLAN
  WORK_TEMPLATE
  WORK_TICKET
}

enum UploadStatus {
  PENDING
  UPLOADED
}

"LocalDateTime"
scalar LocalDateTime

"String that is not empty"
scalar NonEmptyString

"An RFC-3339 compliant Full Time Scalar"
scalar Time

"meaningless value. Necessary just for graphql limitation. Only used for output."
scalar Unit

input CreateAdminUserMutationInput {
  confirmPassword: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateCompanyMutationInput {
  buildingName: NonEmptyString
  city: NonEmptyString!
  name: NonEmptyString!
  phoneNumber: NonEmptyString!
  postalCode: NonEmptyString!
  prefecture: NonEmptyString!
  streetAddress: NonEmptyString!
  url: NonEmptyString
}

input CreateDraftLessonPlanMutationInput {
  annualMaxExecutions: Int
  companyId: ID!
  description: NonEmptyString
  educations: [ID!]!
  grades: [Grade!]!
  lessonPlanDates: [LessonPlanDateInput!]
  lessonType: LessonType
  location: NonEmptyString
  publish: Boolean!
  subjects: [Subject!]!
  title: NonEmptyString
}

input CreateProductMutationInput {
  description: String
  name: String!
  price: Int!
}

input CreateSchoolInput {
  buildingName: String
  city: String!
  name: String!
  phoneNumber: String!
  postalCode: String!
  prefecture: Prefecture!
  schoolCategory: SchoolCategory!
  streetAddress: String!
  url: String
}

input CreateUploadFileInput {
  contentType: NonEmptyString!
  featureName: UploadFileDirectoryFeatureName!
}

input CreateUploadFilesMutationInput {
  fileInputs: [CreateUploadFileInput!]!
}

input DeleteProductMutationInput {
  id: ID!
}

input DeleteSchoolInput {
  id: String!
}

input DeleteUploadFilesMutationInput {
  uploadFileIDs: [ID!]!
}

input LessonPlanDateInput {
  endDay: Int!
  endMonth: Int!
  endTime: Time!
  startDay: Int!
  startMonth: Int!
  startTime: Time!
}

input UpdateCompanyMutationInput {
  buildingName: NonEmptyString
  city: NonEmptyString
  id: ID!
  name: NonEmptyString
  phoneNumber: NonEmptyString!
  postalCode: NonEmptyString
  prefecture: NonEmptyString
  streetAddress: NonEmptyString
  url: NonEmptyString
}

input UpdateEducationMutationInput {
  displayOrder: Int
  id: ID!
  isActive: Boolean
  name: NonEmptyString
}

input UpdateLessonPlanMutationInput {
  annualMaxExecutions: Int
  description: NonEmptyString
  educations: [ID!]!
  grades: [Grade!]!
  id: ID!
  images: [ID!]!
  lessonPlanDates: [LessonPlanDateInput!]
  location: NonEmptyString
  subjects: [Subject!]!
  title: NonEmptyString
  type: LessonType
}

input UpdatePasswordMutationInput {
  adminUserId: ID!
  confirmPassword: String!
  password: String!
}

input UpdateProductMutationInput {
  description: String
  id: ID!
  name: String
  price: Int
}

input UpdateSchoolInput {
  buildingName: String
  city: String
  id: String!
  name: String
  phoneNumber: String
  postalCode: String
  prefecture: Prefecture
  schoolCategory: SchoolCategory
  streetAddress: String
  url: String
}
